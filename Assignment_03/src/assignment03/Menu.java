
package assignment03;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Iterator;
import javax.swing.JOptionPane;


public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        
        //To Start the window in the middle of the screen
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
            setResizable(false);
            setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        sumButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Automated Reservation Machine");

        addButton.setText("Add Patient");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit Patient");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View Patients");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search Patient");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Patient");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        sumButton.setText("Sum");
        sumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton)
                    .addComponent(searchButton))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sumButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteButton)
                    .addComponent(viewButton))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(viewButton))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(deleteButton)
                    .addComponent(sumButton))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddPatient ad = new AddPatient();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
     //Getting user input ID
        String id = JOptionPane.showInputDialog("Enter Patient ID");
        Boolean found = false;
        
       for(Patient p: MyList.ml.values())
       {
           if(p.getId().equals(id))
           {
               found =true;
               EditPatient ep = new EditPatient(id);
           }
       }
       if(!found)
           JOptionPane.showMessageDialog(null, "No Records Found!", "Info", 1);
        // TODO add your handling code here:
    }//GEN-LAST:event_editButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        if(MyList.ml.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "No Records Found!", "Info", 1);
            return;
        }
        ViewPatients vp = new ViewPatients();
        // TODO add your handling code here:
    }//GEN-LAST:event_viewButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
   if(MyList.ml.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "No Records Found!", "Info", 1);
            return;
        }
   
   //Getting user input ID
        String id = JOptionPane.showInputDialog("Enter Patient ID");
        Boolean found = false;
        
       for(Patient p: MyList.ml.values())
       {
           if(p.getId().equals(id))
           {
               found =true;
               SearchPatient searchPatient = new SearchPatient(id);
           }
       }
       if(!found)
           JOptionPane.showMessageDialog(null, "No Records Found!", "Info", 1);
   
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void sumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumButtonActionPerformed
       
        if(MyList.ml.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "No Records Found!", "Info", 1);
            return;
        }
        String message="";
        message += "Total Patients: " + MyList.ml.size();
        JOptionPane.showMessageDialog(null, message, "Info", 1);
            
// TODO add your handling code here:
    }//GEN-LAST:event_sumButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        if(MyList.ml.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "No Records Found!", "Info", 1);
            return;
        }
   
   //Getting user input ID
        String id = JOptionPane.showInputDialog("Enter Patient ID");
        Boolean found = false;
        
       for(Patient p: MyList.ml.values())
       {
           if(p.getId().equals(id))
           {
               found =true;
               MyList.ml.remove(id);
               JOptionPane.showMessageDialog(null, "Entry has been deleted!", "Info", 1);
               break;
               
           }
       }
       if(!found)
           JOptionPane.showMessageDialog(null, "ID not Found!", "Info", 1);
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton sumButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
